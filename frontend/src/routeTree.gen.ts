/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingRouteImport } from './routes/setting'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MeasurementPidRouteImport } from './routes/measurement/$pid'

const SettingRoute = SettingRouteImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MeasurementPidRoute = MeasurementPidRouteImport.update({
  id: '/measurement/$pid',
  path: '/measurement/$pid',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/setting': typeof SettingRoute
  '/measurement/$pid': typeof MeasurementPidRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/setting': typeof SettingRoute
  '/measurement/$pid': typeof MeasurementPidRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/setting': typeof SettingRoute
  '/measurement/$pid': typeof MeasurementPidRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/setting' | '/measurement/$pid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/setting' | '/measurement/$pid'
  id: '__root__' | '/' | '/setting' | '/measurement/$pid'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingRoute: typeof SettingRoute
  MeasurementPidRoute: typeof MeasurementPidRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/setting': {
      id: '/setting'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof SettingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/measurement/$pid': {
      id: '/measurement/$pid'
      path: '/measurement/$pid'
      fullPath: '/measurement/$pid'
      preLoaderRoute: typeof MeasurementPidRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingRoute: SettingRoute,
  MeasurementPidRoute: MeasurementPidRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
